# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "vagrantip"
  config.vm.network "private_network", type: "dhcp"
  config.vm.hostname = "vagranturl"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "public_html", "/var/www/public_html/",
    group: "www-data",
    mount_options: ["dmode=775,fmode=664"]

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

  # Updating Ubuntu
  sudo apt update
  sudo apt upgrade<<EOF
Y
EOF

  # Installing Apache2
  echo "*** Installing Apache2"
  sudo apt-get install -y apache2

  # Installing SQL
  echo "*** Installing SQL"
  export DEBIAN_FRONTEND="noninteractive"
  sudo debconf-set-selections <<< "mysql-server mysql-server/root_password password root"
  sudo debconf-set-selections <<< "mysql-server mysql-server/root_password_again password root"
  sudo apt-get install mysql-server <<EOF
Y
EOF

  # Installing SQL Client to enable sql cli
sudo apt-get install mysql-client <<EOF
Y
EOF

  # Securing mysql for Dev

  # Installing PHP
  echo "*** Installing PHP"
  sudo apt-get install php7.0 libapache2-mod-php php-mysql php-cli

  # Installing PHP Mcrypt
  sudo apt-get install php7.0-mcrypt
  sudo service apache2 restart

  # Installing PHP Mod
  echo "*** Installing PHP Mod"
  sudo apt-get install libapache2-mod-php <<EOF
Y
EOF

  # Installing Mysql for PHP
  sudo apt-get install php7.0-mysql <<EOF
Y
EOF

  # Bootstrap Example
  echo "*** Bootstrap Example"

  cd /var/www/public_html/

    sudo cat > index.php << HelloWorldMessage
  <?php echo "Hello Wordpress!"; ?>
HelloWorldMessage

  cd /etc/apache2/sites-available/

  sudo cat > vagranturl.conf << VirtualHostMessage
<VirtualHost *:80>
  ServerAdmin admin@localhost
  ServerName wordpress_test
  ServerAlias vagranturl
  DocumentRoot /var/www/public_html
  ErrorLog ${APACHE_LOG_DIR}/error.log
  CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
VirtualHostMessage

  # Enabling Site
  sudo a2ensite vagranturl.conf

  # Disabling Default
  sudo a2dissite 000-default.conf

  # Apache2 Reload
  sudo service apache2 reload

  SHELL
end
